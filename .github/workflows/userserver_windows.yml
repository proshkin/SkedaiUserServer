name: Windows UserServer Build

on:
  repository_dispatch:
    types: [trigger-userserver-build]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup Node.js environment for packages
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'

      - name: Install dependencies for userServerMain.js
        run: |
          npm install -g nexe
          npm install

      - name: setup Node.js environment for nexe
        uses: actions/setup-node@v4
        with:
          node-version: '14.15.3'

      - name: Download version artifact from previous workflow
        uses: actions/download-artifact@v2
        with:
          name: version

      - name: Read version
        id: read_version
        run: |
          version=$(cat version.txt)
          echo "version=$version" >> $GITHUB_ENV

      - name: Build userServerMain.js to main.exe
        run: nexe userServerMain.js -o main.exe

      - name: Check if release exists
        id: check_release
        run: |
          release_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.version }}" | jq -r '.url')
          if [ "$release_url" == "null" ]; then
            echo "release_exists=false" >> $GITHUB_ENV
          else
            echo "release_exists=true" >> $GITHUB_ENV
            echo "release_url=$release_url" >> $GITHUB_ENV
          fi

      - name: Create or Get Release
        id: create_or_get_release
        if: env.is_release == 'true'
        run: |
          if [ "${{ env.release_exists }}" == "true" ]; then
            echo "Using existing release."
            echo "upload_url=$(curl -s -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' ${{ env.release_url }} | jq -r '.upload_url' | sed -e 's/{?name,label}//')" >> $GITHUB_ENV
          else
            echo "Creating new release."
            response=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"tag_name\": \"${{ env.version }}\", \"name\": \"Release ${{ env.version }}\", \"body\": \"Automated release\", \"draft\": false, \"prerelease\": ${{ env.is_prerelease == 'true' }}}" \
              "https://api.github.com/repos/${{ github.repository }}/releases")
            echo "upload_url=$(echo $response | jq -r '.upload_url' | sed -e 's/{?name,label}//')" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        if: env.is_release == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.SKEDAI_ACTION_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: main.exe
          asset_name: userServer_win_${{ env.version }}
          asset_content_type: application/octet-stream
